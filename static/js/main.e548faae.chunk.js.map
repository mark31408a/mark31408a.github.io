{"version":3,"sources":["logo.svg","serviceWorker.js","components.js","pages.js","app.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","className","to","src","logo","alt","width","height","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Home","class","style","href","Introduction","Magictoys","APP","props","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,yJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCdAC,EAAS,WACb,OACE,yBAAKC,UAAU,iDACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAChC,yBAAKC,IAAKC,IAAMC,IAAI,0BAA0BC,MAAM,KAAKC,OAAO,QAGlE,4BACEN,UAAU,iBACVO,KAAK,SACLC,cAAY,WACZC,cAAY,iBACZC,gBAAc,gBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMZ,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2Ba,GAAG,iBAC3C,wBAAIb,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,SAIF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,iBAA9B,iBAIF,wBAAID,UAAU,qBACZ,kBAAC,IAAD,CACEA,UAAU,WACVC,GAAG,cAFL,kBClCNa,EAAO,WACT,OACI,6BACI,wBAAId,UAAU,QAAd,YACA,oEACA,8FACA,oEACA,yBAAKe,MAAM,OAAOC,MAAO,CAACX,MAAO,WAC7B,yBAAKH,IAAI,MAAMa,MAAM,eAAeX,IAAI,QACxC,yBAAKW,MAAM,aACP,wBAAIA,MAAM,cAAV,cACA,uBAAGA,MAAM,aAAT,kGACA,uBAAGE,KAAK,IAAIF,MAAM,mBAAlB,oBAOdG,EAAe,WACjB,OACI,6BACI,wBAAIlB,UAAU,QAAd,gBACA,oEACA,8FACA,oEACA,gCAINmB,EAAY,WACd,OACI,6BACI,wBAAInB,UAAU,QAAd,eClBGoB,EAZH,SAACC,GACT,OACI,yBAAKrB,UAAU,aACX,kBAAC,EAAD,MAEF,kBAAC,IAAD,CAAOsB,KAAK,IAAIC,OAAK,EAACC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,KAAK,gBAAgBE,UAAWN,IACvC,kBAAC,IAAD,CAAOI,KAAK,aAAaE,UAAWL,MCN9CM,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SJuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e548faae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from './logo.svg';\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\n      <Link className=\"navbar-brand\" to=\"/\">\n        <img src={logo} alt=\"react-router-breadcrumb\" width=\"30\" height=\"30\" />\n      </Link>\n\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarContent\"\n        aria-controls=\"navbarContent\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\" />\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarContent\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\">\n              Home\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/Introduction\">\n              Introduction\n            </Link>\n          </li>\n          <li className=\"nav-item dropdown\">\n            <Link\n              className=\"nav-link\"\n              to=\"/Magictoys\"\n              \n            >\n              Magictoys\n            </Link>\n            \n            \n          </li>\n          \n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport { Navbar };","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nconst Home = () => {\n    return(\n        <div>\n            <h1 className=\"py-3\">Homepage</h1>\n            <h5>助教要我做的</h5>\n            <p>我是鄭仲堯，學號是b06901137</p>\n            <h5>讓助教開心的</h5>\n            <div class=\"card\" style={{width: \"180 px\"}}>\n                <img src=\"...\" class=\"card-img-top\" alt=\"...\"/>\n                <div class=\"card-body\">\n                    <h5 class=\"card-title\">Card title</h5>\n                    <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n                    <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n  \nconst Introduction = () => {\n    return(\n        <div>\n            <h1 className=\"py-3\">Introduction</h1>\n            <h5>助教要我做的</h5>\n            <p>我是鄭仲堯，學號是b06901137</p>\n            <h5>讓助教開心的</h5>\n            <img/>\n        </div>\n    );\n};\nconst Magictoys = () => {\n    return(\n        <div>\n            <h1 className=\"py-3\">Magictoys</h1>\n            \n        </div>\n    );\n};\n\n  \nexport { Home, Introduction, Magictoys };","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { Navbar } from './components';\nimport { Home, Introduction, Magictoys } from './pages';\n\nconst APP = (props) => {\n    return (\n        <div className=\"container\">\n            <Navbar/>\n          {/* The corresponding component will show here if the current URL matches the path */}\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/Introduction\" component={Introduction} />\n          <Route path=\"/Magictoys\" component={Magictoys} />\n        </div>\n    );\n}\n\nexport default APP;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch } from 'react-router-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport APP from './app'\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <APP />\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}