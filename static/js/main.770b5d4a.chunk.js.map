{"version":3,"sources":["serviceWorker.js","components.js","LieDetector.js","pages.js","app.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","Breadcrumb","Item","linkAs","Link","linkProps","to","href","LieDetector","props","useState","percentage","setpercentage","wrd","setwrd","ans","setans","wait","setwait","useEffect","interval","setInterval","clearInterval","Card","style","width","Body","Img","varient","src","onClick","push","Title","Subtitle","Text","Button","variant","length","shift","ProgressBar","striped","now","Home","className","Introduction","Magictoys","APP","path","exact","component","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.770b5d4a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport{Breadcrumb} from 'react-bootstrap';\n\n\nconst Navbar = () => {\n  return (\n    <Breadcrumb>\n      <Breadcrumb.Item linkAs={Link} linkProps={{ to: \"/\" }}>Home</Breadcrumb.Item>\n      <Breadcrumb.Item linkAs={Link} linkProps={{ to: \"/Introduction\" }}>Introduction</Breadcrumb.Item>\n      <Breadcrumb.Item linkAs={Link} linkProps={{ to: \"/Magictoys\" }}>Magictoys</Breadcrumb.Item>\n      <Breadcrumb.Item href=\"https://getbootstrap.com/docs/4.0/components/breadcrumb/\">\n        using_Library\n      </Breadcrumb.Item>\n    </Breadcrumb>\n  );\n};\n\nexport { Navbar };","import React ,{useEffect,useState}from 'react';\nimport {Card,Button,ProgressBar} from 'react-bootstrap'\n\nconst LieDetector = (props) => {\n    const [percentage, setpercentage] = useState(100);\n    const [wrd, setwrd] = useState(\"\");\n    const [ans, setans] = useState([true]);\n    const [wait, setwait] = useState(false);\n    \n    useEffect(() => {\n        const interval = setInterval(() => {\n                setpercentage(percentage=>percentage===100?percentage:percentage+10);\n                \n        }, 300);\n        return () => clearInterval(interval);\n      }, []);\n      const TrueOnclick=()=>{\n        if(percentage!==100){\n            setwait(true)\n            return \n        }\n        setpercentage(0);\n        setwrd(ans[0]?\"Congratulations! You pass.\":\"Stop lieing!!!\")\n        if(ans.length>1){\n            ans.shift()\n            setans(ans);\n        }\n\n      };\n      const FalseOnclick=()=>{\n        if(percentage!==100){\n            setwait(true)\n            return \n        }\n        setpercentage(percentage=>0);\n        setwrd(!ans[0]?\"Congratulations! You pass.\":\"Stop lieing!!!\")\n        if(ans.length>1){\n            ans.shift()\n            setans(ans);\n        }\n      };\n      \n    return (\n        <Card style={{ width: '19rem' }}>\n            <Card.Body>\n                <Card.Img varient=\"bottom\" src=\"./fingerprint.png\" style={{ width: '5rem' }} onClick={()=>{\n                    ans.push(true)\n                    setans(ans)\n                }}/>\n                <span> </span>                \n                <Card.Img varient=\"bottom\" src=\"./fingerprint.png\" style={{ width: '5rem' }}/>\n                <span> </span>\n                <Card.Img varient=\"bottom\" src=\"./fingerprint.png\" style={{ width: '5rem' }} onClick={()=>{\n                    ans.push(false)\n                    setans(ans)\n                }}/>\n                <Card.Title>Liedetector</Card.Title>\n                <Card.Subtitle>I can see through everything...</Card.Subtitle>\n                <Card.Text>answer the question!</Card.Text>\n                <Button  variant=\"success\" onClick={TrueOnclick}>true</Button>\n                <Button variant=\"danger\" onClick={FalseOnclick}>false</Button>\n                <Card.Text> </Card.Text>\n                {percentage===100?<Card.Text>{wrd}</Card.Text>:<ProgressBar striped variant=\"warning\" now={percentage} />}\n                {percentage!==100&&wait?<Card.Text>please be patient.</Card.Text>:\"\"}\n                \n  \n            </Card.Body>\n        </Card>\n    );\n}\n\nexport {LieDetector};","import React from 'react';\nimport {Card} from 'react-bootstrap';\nimport {LieDetector} from './LieDetector';\nconst Home = () => {\n    return(\n        <div>\n            <h1 className=\"py-3\">Homepage</h1>\n            <h5>助教要我做的</h5>\n            <p>我是鄭仲堯，學號是b06901137</p>\n            <h5>讓助教開心的</h5>\n            <Card style={{ width: '18rem' }}>\n                <Card.Img variant=\"top\" src=\"./pi1.jpg\" />\n                <Card.Body>\n                    <Card.Title>鄭仲堯</Card.Title>\n                    <Card.Text>電機系爆肝工程師</Card.Text>\n                    <Card.Text>興趣魔術</Card.Text>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n};\n  \nconst Introduction = () => {\n    return(\n        <div>\n            <h1 className=\"py-3\">Introduction</h1>\n            <p>i'm too lazy to type anything here.</p>\n\n            \n        </div>\n    );\n};\nconst Magictoys = () => {\n    return(\n        <div>\n            <h1 className=\"py-3\">Magictoys</h1>\n            <LieDetector/>\n        </div>\n    );\n};\n\n  \nexport { Home, Introduction, Magictoys };","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { Navbar } from './components';\nimport { Home, Introduction, Magictoys } from './pages';\n\nconst APP = (props) => {\n    return (\n        <div className=\"container\">\n            <Navbar/>\n          {/* The corresponding component will show here if the current URL matches the path */}\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/Introduction\" component={Introduction} />\n          <Route path=\"/Magictoys\" component={Magictoys} />\n        </div>\n    );\n}\n\nexport default APP;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter,BrowserRouter, Switch } from 'react-router-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport APP from './app'\nReactDOM.render(\n  <HashRouter basename='/'>\n  <BrowserRouter>\n    <Switch>\n      <APP />\n    </Switch>\n  </BrowserRouter>\n  </HashRouter>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}